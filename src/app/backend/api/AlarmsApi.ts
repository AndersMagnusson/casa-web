/**
 * Magnusson Home Security
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mange_magnusson@hotmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional, Injector } from '@angular/core';
import { HttpClient, HttpHeaders, HttpRequest, HttpResponse } from '@angular/common/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { environment } from '../../../environments/environment';
import { ToggleAlarm } from '../model/models';

@Injectable()
export class AlarmsApi {

    protected basePath = 'http://tobedecided/v1';
    public defaultHeaders: HttpHeaders = new HttpHeaders();
    public configuration: Configuration = new Configuration();

    constructor(protected http: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        } else {
            this.basePath = BASE_PATH;
        }
        if (configuration) {
            this.configuration = configuration;
        }
        this.defaultHeaders.set('Content-Type', 'application/json');
    }

    /**
     * 
     * @summary Get current state of the alarm
     * @param id Id of the alarm
     */
    public getAlarm(id: string): Observable<models.Alarm> {
        const path = this.basePath + `/alarms/${id}`;
        return this.http.get<models.Alarm>(path, { headers: this.defaultHeaders });
    }

    public deleteAlarm(id: string): Observable<Object> {
        const path = this.basePath + `/alarms/${id}`;
        return this.http.delete(path, { headers: this.defaultHeaders });
    }

    public getLogs(id: string): Observable<models.Alarm[]> {
        const path = this.basePath + `/alarms/${id}/toggle`;
        return this.http.get<models.Alarm[]>(path, { headers: this.defaultHeaders });
    }

    public getAlarms(): Observable<models.Alarm[]> {
        const path = this.basePath + `/alarms/`;
        return this.http.get<models.Alarm[]>(path, { headers: this.defaultHeaders });
    }

    /**
     * 
     * @summary Gets all alarms
     */
    public listAlarms(extraHttpRequestParams?: any): Observable<models.Alarm[]> {
        const path = this.basePath + '/alarms';
        return this.http.get<models.Alarm[]>(path, { headers: this.defaultHeaders, });
    }

    /**
     * 
     * @summary Toggle alarm
     * @param id Id of the alarm
     * @param body Toggle alarms
     */
    public toggleAlarm(id: string, body: models.ToggleAlarm): Observable<ToggleAlarm> {
        const path = this.basePath + `/alarms/${id}/toggle`;
        return this.http.post(path, body, { headers: this.defaultHeaders, });
    }

    public createAlarm(body: models.CreateAlarm): Observable<{}> {
        const path = this.basePath + `/alarms/`;
        return this.http.post(path, body, { headers: this.defaultHeaders, });
    }
}

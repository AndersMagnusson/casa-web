/**
 * Magnusson Home Security
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mange_magnusson@hotmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional, Injector } from '@angular/core';
import { HttpClient, HttpHeaders, HttpRequest, HttpResponse } from '@angular/common/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { environment } from '../../../environments/environment';


@Injectable()
export class AlertsApi {

    protected basePath = 'http://tobedecided/v1';
    public defaultHeaders: HttpHeaders = new HttpHeaders();
    public configuration: Configuration = new Configuration();

    constructor(protected http: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        } else {
            this.basePath = BASE_PATH;
        }
        if (configuration) {
            this.configuration = configuration;
        }
        this.defaultHeaders.set('Content-Type', 'application/json');
    }

    public listAlerts(): Observable<models.Alert[]> {
        const path = `${this.basePath}/alerts`;
        return this.http.get<models.Alert[]>(path, { headers: this.defaultHeaders, });
    }

    /**
     * 
     * @summary Gets all alerts
     */
    public listAlertsForAlarm(alarmId: string): Observable<models.Alert[]> {
        const path = `${this.basePath}/alarms/${alarmId}/alerts`;
        return this.http.get<models.Alert[]>(path, { headers: this.defaultHeaders, });
    }

    /**
     * 
     * @summary Get alerts for the specified id
     * @param id Id of the alert
     */
    public listAlertsById(alarmId: string, id: string): Observable<models.Alert[]> {
        const path = `${this.basePath}/alarms/${alarmId}/alerts/${id}`;
        return this.http.get<models.Alert[]>(path, { headers: this.defaultHeaders, });

        // return this.listAlertsByIdWithHttpInfo(id, extraHttpRequestParams)
        //     .map((response: Response) => {
        //         if (response.status === 204) {
        //             return undefined;
        //         } else {
        //             return response.json() || {};
        //         }
        //     });
    }
}
